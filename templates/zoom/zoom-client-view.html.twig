{% extends 'base.html.twig' %}

{% block title %}Zoom Client view example{% endblock %}

{% block stylesheets %}
    <link type="text/css" rel="stylesheet" href="{{ '/client-view.css' }}"/>

    <!-- For Web Client View: import Web Meeting SDK CSS -->
    <link type="text/css" rel="stylesheet" href="https://source.zoom.us/{{ ZOOM_VERSION }}/css/bootstrap.css" />
    <link type="text/css" rel="stylesheet" href="https://source.zoom.us/{{ ZOOM_VERSION }}/css/react-select.css" />
{% endblock %}

{% block body %}
    <div class="content">
        <div class="example-wrapper">
            <h1>Zoom Client view âœ…</h1>
        </div>

        <div>
            <div>
                <label for="meetName">Meeting Name :</label>
                <input type="text" id="meetName" name="meetName" minlength="4" maxlength="16">
            </div>

            <button id="joinMeetingButton" onClick="joinMeeting()">Join Meeting</button>
        </div>
  

    </div>
{% endblock %}

{% block body_script %}
    <!-- For either view: import Web Meeting SDK JS dependencies -->
    <script src="https://source.zoom.us/{{ ZOOM_VERSION }}/lib/vendor/react.min.js"></script>
    <script src="https://source.zoom.us/{{ ZOOM_VERSION }}/lib/vendor/react-dom.min.js"></script>
    <script src="https://source.zoom.us/{{ ZOOM_VERSION }}/lib/vendor/redux.min.js"></script>
    <script src="https://source.zoom.us/{{ ZOOM_VERSION }}/lib/vendor/redux-thunk.min.js"></script>
    <script src="https://source.zoom.us/{{ ZOOM_VERSION }}/lib/vendor/lodash.min.js"></script>

    <!-- For Component View -->
    <script src="https://source.zoom.us/{{ ZOOM_VERSION }}/zoom-meeting-embedded-{{ ZOOM_VERSION }}.min.js"></script>

    <!-- For Client View -->
    <script src="https://source.zoom.us/zoom-meeting-{{ ZOOM_VERSION }}.min.js"></script>

    <script>
        var sdkKey = '{{ ZOOM_SDK_KEY }}'; // Your Zoom SDK key
        var userName = 'JavaScript'; // Name of the user starting or joining the meeting
        var passWord = ''; // Leave as empty string if the meetingonly requires the waiting room
        var leaveUrl = "http://locahost"; //url where participants are taken after they leave the meeting
        var role = 0; // participant = 0, host = 1

        // Loading Zoom
        ZoomMtg.preLoadWasm()
        ZoomMtg.prepareWebSDK()

        // load language file, also passes any error messages to the ui
        ZoomMtg.i18n.load('en-US')
        ZoomMtg.i18n.reload('en-US')

        // Set Web Meeting SDK lib (for Global)
        ZoomMtg.setZoomJSLib('https://sorce.zoom.us/{{ ZOOM_VERSION }}/lib', '/av')

        function joinMeeting() {
            // 1 - Meeting name
            var meetName = $("#meetName").val();

            if (meetName.length < 4) {
                alert("Meeting name min length is 4");
                return
            }

            // 2 - Meeting number
            getMeetingId(meetName);
        }

        function getMeetingId(meetingName) {
            $.ajax({
                type: "POST",
                url: "/getMeetingId",
                contentType: 'application/json',
                data: JSON.stringify({
                    meetingName: meetingName,
                }),
                success: function(meetingId) {
                    // 3 - signature
                    getSignature(meetingId);
                },
                error: function(request) {
                    console.log(request.responseText);
                    alert("Invalid meeting number");
                }
            });
        }

        function getSignature(meetingId) {
            $.ajax({
                type: "POST",
                url: "/generateSDKSignature",
                contentType: 'application/json',
                data: JSON.stringify({
                    meetingId: meetingId,
                    role: role,
                }),
                success: function(data) { 
                    console.log(data);
                    
                    // 4 - Start and join meeting
                    startMeeting(meetingId, data.signature);
                 },
                error: function(request) {
                    console.log(request.responseText);
                    alert("Invalid signature");
                }
            });
        }

        function startMeeting(meetingId, signature) {
            document.getElementById('zmmtg-root').style.display = 'block';

            ZoomMtg.init({
                leaveUrl: leaveUrl,
                success: (success) => {
                    ZoomMtg.join({
                        meetingNumber: meetingId, // meetingNumber <=> meetingId
                        userName: userName,
                        //userEmail: '', required only for Webinar
                        passWord: passWord,
                        signature: signature, // role in signature needs to be 1 to start and need to be 0 to join the meeting
                        apiKey: sdkKey,
                        success: (success) => { 
                            console.log("Join succes");
                            console.log(success)
                        },
                        error: (error) => { 
                            console.log("Join error");
                            console.log(error)
                        },          
                    })
                },
                error: (error) => {
                    console.log(error)
                }
            });
        }
    </script>
{% endblock %}